import React, { useEffect, useRef, useState, Component } from 'react';
import ReactPaginate from 'react-paginate';
import useCollapse from 'react-collapsed';
import TextareaAutosize from 'react-textarea-autosize';
import ToggleSwitch from '../Misc/ToggleSwitch';
import EdiText from 'react-editext';

function Items({ currentItems }) {
  return <>{currentItems && currentItems.map((item) => <div>{item}</div>)}</>;
}

function PaginatedItems({ itemsPerPage, props }) {
  const [currentItems, setCurrentItems] = useState(null);
  const [pageCount, setPageCount] = useState(0);
  const [chapterCount, setchapterCount] = useState(1);
  const [itemOffset, setItemOffset] = useState(0);
  const [form, setform] = useState([]);
  const [id, setId] = useState(1);
  const [QnA, setQnA] = useState({
    questions: [],
    options: [],
  });
  const [data, setData] = useState([]);
  const childToParent = (childdata) => {
    setData(childdata);
    setQnA([...QnA.questions, childdata]);
  };

  const [data1, setData1] = useState([]);
  const childToParent1 = (childdata1) => {
    setData(childdata1);
    setQnA([...QnA.questions, childdata1]);
  };
  console.log('qwe', QnA);

  useEffect(() => {
    function QuizQuestion({ childToParent }) {
      const [editing, setEditing] = useState(false);
      const [value, setValue] = useState('Enter the question');
      const datax = value;

      const handleSave = (value) => {
        console.log('value1', value);
        setValue(value);
      };

      console.log(value);
      function child(datax) {
        childToParent(datax);
      }
      useEffect(() => {
        child(datax);
      }, [datax]);

      return (
        <div>
          <EdiText
            value={value}
            type="text"
            onSave={handleSave}
            editing={editing}
          />{' '}
        </div>
      );
    }

    function QuizOptions({ childToParent1 }) {
      const [isExpanded, setExpanded] = useState(false);
      const { getCollapseProps, getToggleProps } = useCollapse({ isExpanded });
      const [editing, setEditing] = useState(false);
      const [value, setValue] = useState({
        options: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],
      });
      const [x, setX] = useState([]);

      function child(x) {
        childToParent(x);
      }
      useEffect(() => {
        child(x);
      }, [x]);

      const handleSave1 = (value) => {
        console.log('value1', value);
        setX([...x, value]);
      };
      const handleSave2 = (value) => {
        console.log('value1', value);
        setX([...x, value]);
      };
      const handleSave3 = (value) => {
        console.log('value1', value);
        setX([...x, value]);
      };
      const handleSave4 = (value) => {
        console.log('value1', value);
        setX([...x, value]);
      };

      console.log('x', x);
      useEffect(() => {
        setData(x);
        console.log('data', data);
      }, [x]);

      return (
        <div>
          <button
            {...getToggleProps({
              onClick: () => setExpanded((prevExpanded) => !prevExpanded),
            })}
            className="QnA-Options-expand"
          >
            {isExpanded ? (
              <div>
                <svg
                  width={37}
                  height={36}
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <rect
                    x={3.199}
                    y={16.5}
                    width={28.851}
                    height={3}
                    rx={1.5}
                    fill="#111"
                  />
                </svg>
              </div>
            ) : (
              <div>
                <svg
                  width={37}
                  height={36}
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M29.013 19.5h-9.11v9h-3.038v-9h-9.11v-3h9.11v-9h3.037v9h9.111v3z"
                    fill="#000"
                  />
                </svg>
              </div>
            )}
          </button>

          <section {...getCollapseProps()}>
            <div>
              <div className="QnA-multiChoice">
                <div className="QnA-multiChoiceOption ">
                  <div>
                    {' '}
                    <EdiText
                      value={value.options[0]}
                      type="text"
                      onSave={handleSave1}
                      editing={editing}
                    />
                  </div>
                  <div>
                    <ToggleSwitch label="Option_1" />
                  </div>
                </div>
                <div className="QnA-multiChoiceOption">
                  <div>
                    <EdiText
                      value={value.options[1]}
                      type="text"
                      onSave={handleSave2}
                      editing={editing}
                    />{' '}
                  </div>
                  <div>
                    <ToggleSwitch label="Option_2" />
                  </div>
                </div>
                <div className="QnA-multiChoiceOption">
                  <div>
                    <EdiText
                      value={value.options[2]}
                      type="text"
                      onSave={handleSave3}
                      editing={editing}
                    />{' '}
                  </div>
                  <div>
                    <ToggleSwitch label="Option_3" />
                  </div>
                </div>
                <div className="QnA-multiChoiceOption">
                  <div>
                    <EdiText
                      value={value.options[3]}
                      type="text"
                      onSave={handleSave4}
                      editing={editing}
                    />{' '}
                  </div>
                  <div>
                    <ToggleSwitch label="Option_4" />
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
      );
    }

    setId(id + 1);

    setform((form) => [
      ...form,
      <div>
        <div className="quizQuestions">
          <div>
            <div>
              {' '}
              <div className="QnA-question">
                <div className="QnA-questionNum">Question {id}</div>
                <div className="QnA-HeaderContent">
                  <div className="QnA-questionTitle">
                    <QuizQuestion childToParent={childToParent} />
                  </div>

                  <div className="QnA-Options">
                    <button
                      className="QnA-Options-delete"
                      onClick={deleteHandler}
                    >
                      <svg
                        width={37}
                        height={36}
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M24.296 13.5v15H12.148v-15h12.148zm-2.278-9h-7.593L12.907 6H7.592v3h21.259V6h-5.315l-1.518-1.5zm5.314 6H9.111v18c0 1.65 1.366 3 3.037 3h12.148c1.67 0 3.037-1.35 3.037-3v-18z"
                          fill="#000"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
                <div>
                  <QuizOptions childToParent1={childToParent1} />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>,
    ]);
  }, [chapterCount]);

  function deleteHandler(event) {
    event.preventDefault();
    console.log('delete');
  }

  useEffect(() => {
    const endOffset = itemOffset + itemsPerPage;
    console.log(`Loading items from ${itemOffset} to ${endOffset}`);
    setCurrentItems(form.slice(itemOffset, endOffset));
    setPageCount(Math.ceil(form.length / itemsPerPage));
    chapterCountToItems();
  }, [itemOffset, itemsPerPage, props, chapterCount]);

  const handlePageClick = (event) => {
    const newOffset = (event.selected * itemsPerPage) % form.length;
    console.log(
      `User requested page number ${event.selected}, which is offset ${newOffset}`
    );
    setItemOffset(newOffset);
  };

  const chapterCountToItems = () => {
    setchapterCount(props);
  };

  return (
    <>
      {' '}
      <Items currentItems={currentItems} />
      <ReactPaginate
        breakLabel="..."
        nextLabel="NEXT"
        onPageChange={handlePageClick}
        pageRangeDisplayed={5}
        pageCount={pageCount}
        previousLabel="PREVIOUS"
        renderOnZeroPageCount={null}
      />
    </>
  );
}

export default PaginatedItems;
